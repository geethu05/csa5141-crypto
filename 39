#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// English letter frequencies in order of most to least frequent (source: average of several texts)
const char english_freq[] = "ETAOINSHRDLCUMWFGYPBVKJXQZ";

// Function to analyze the frequency of letters in the ciphertext
void analyze_frequency(const char *ciphertext, int *freq) {
    int length = strlen(ciphertext);

    // Initialize frequency array
    for (int i = 0; i < 26; i++) {
        freq[i] = 0;
    }

    // Count the frequency of each letter in the ciphertext
    for (int i = 0; i < length; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            freq[ciphertext[i] - 'A']++;
        }
    }
}

// Function to decrypt the ciphertext using a given key
void decrypt(const char *ciphertext, char *plaintext, int key) {
    int length = strlen(ciphertext);
    for (int i = 0; i < length; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            plaintext[i] = ((ciphertext[i] - 'A' - key + 26) % 26) + 'A';
        } else {
            plaintext[i] = ciphertext[i]; // Non-alphabet characters remain the same
        }
    }
    plaintext[length] = '\0'; // Null-terminate the plaintext
}

// Function to compare frequencies for qsort
int compare_freq(const void *a, const void *b) {
    return ((int *)b) - ((int *)a);
}

int main() {
    char ciphertext[256];
    int top_n;

    // Get the ciphertext input from the user
    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = 0; // Remove newline character

    // Get the number of top possible plaintexts to display
    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &top_n);

    int freq[26];
    char plaintext[256];

    // Analyze the frequency of letters in the ciphertext
    analyze_frequency(ciphertext, freq);

    // Create a sorted list of frequencies
    int sorted_freq[26];
    memcpy(sorted_freq, freq, sizeof(freq));
    qsort(sorted_freq, 26, sizeof(int), compare_freq);

    // Determine possible keys based on frequency analysis
    int possible_keys[26];
    for (int i = 0; i < 26; i++) {
        for (int j = 0; j < 26; j++) {
            if (freq[j] == sorted_freq[i]) {
                possible_keys[i] = (j - (english_freq[i] - 'A') + 26) % 26;
                break;
            }
        }
    }

    // Display the top possible plaintexts
    for (int i = 0; i < top_n && i
