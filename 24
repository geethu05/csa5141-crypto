#include <stdio.h>
#include <stdint.h>

// Function to compute gcd using Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Function to find the modular inverse using the extended Euclidean algorithm
int mod_inverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1) {
        return 0;
    }

    while (a > 1) {
        // q is quotient
        q = a / m;
        t = m;

        // m is remainder now, process same as Euclid's algorithm
        m = a % m;
        a = t;
        t = x0;

        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0) {
        x1 += m0;
    }

    return x1;
}

// Function to factorize n into p and q
void factorize(int n, int *p, int *q) {
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            *p = i;
            *q = n / i;
            return;
        }
    }
}

int main() {
    int n = 3599;
    int e = 31;
    int p, q;

    // Factorize n into p and q
    factorize(n, &p, &q);
    printf("Factors of %d are p = %d and q = %d\n", n, p, q);

    // Compute φ(n)
    int phi_n = (p - 1) * (q - 1);
    printf("φ(n) = %d\n", phi_n);

    // Compute the private key d
    int d = mod_inverse(e, phi_n);
    printf("The private key d is %d\n", d);

    return 0;
}
