#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define SBOX_LEN 4

// S-DES S-Boxes
int S0[SBOX_LEN][SBOX_LEN] = {
    {1, 0, 3, 2},
    {3, 2, 1, 0},
    {0, 2, 1, 3},
    {3, 1, 3, 2}
};

int S1[SBOX_LEN][SBOX_LEN] = {
    {0, 1, 2, 3},
    {2, 0, 1, 3},
    {3, 0, 1, 0},
    {2, 1, 0, 3}
};

// Permutation and IP tables
int P10[] = {3, 5, 2, 7, 4, 10, 1, 9, 8, 6};
int P8[] = {6, 3, 7, 4, 8, 5, 10, 9};
int IP[] = {2, 6, 3, 1, 4, 8, 5, 7};
int IP_INV[] = {4, 1, 3, 5, 7, 2, 8, 6};
int EP[] = {4, 1, 2, 3, 2, 3, 4, 1};
int P4[] = {2, 4, 3, 1};
int P[] = {2, 4, 3, 1};

void permute(int *input, int *output, int *permutation, int length) {
    for (int i = 0; i < length; i++) {
        output[i] = input[permutation[i] - 1];
    }
}

void left_shift(int *input, int shifts) {
    int temp[shifts];
    for (int i = 0; i < shifts; i++) {
        temp[i] = input[i];
    }
    for (int i = 0; i < 10 - shifts; i++) {
        input[i] = input[i + shifts];
    }
    for (int i = 0; i < shifts; i++) {
        input[10 - shifts + i] = temp[i];
    }
}

void key_generation(int *key, int *K1, int *K2) {
    int permuted_key[10];
    permute(key, permuted_key, P10, 10);
    left_shift(permuted_key, 1);
    permute(permuted_key, K1, P8, 8);
    left_shift(permuted_key, 2);
    permute(permuted_key, K2, P8, 8);
}

void sbox_lookup(int *input, int sbox[SBOX_LEN][SBOX_LEN], int *output) {
    int row = input[0] * 2 + input[3];
    int col = input[1] * 2 + input[2];
    int val = sbox[row][col];
    output[0] = (val & 0x2) >> 1;
    output[1] = val & 0x1;
}

void f_function(int *input, int *subkey, int *output) {
    int expanded[8];
    permute(input, expanded, EP, 8);
    for (int i = 0; i < 8; i++) {
        expanded[i] ^= subkey[i];
    }

    int left[4], right[4], sbox_output[4];
    for (int i = 0; i < 4; i++) {
        left[i] = expanded[i];
        right[i] = expanded[i + 4];
    }

    int sbox_in[4], sbox_out[2];
    for (int i = 0; i < 2; i++) {
        sbox_in[i] = left[i];
        sbox_in[i + 2] = left[i + 2];
    }
    sbox_lookup(sbox_in, S0, sbox_out);
    for (int i = 0; i < 2; i++) {
        sbox_output[i] = sbox_out[i];
    }

    for (int i = 0; i < 2; i++) {
        sbox_in[i] = right[i];
        sbox_in[i + 2] = right[i + 2];
    }
    sbox_lookup(sbox_in, S1, sbox_out);
    for (int i = 0; i < 2; i++) {
        sbox_output[i + 2] = sbox_out[i];
    }

    permute(sbox_output, output, P4, 4);
}

void sdes_encrypt_decrypt(int *input, int *key, int *output, int mode) {
    int permuted_input[8];
    permute(input, permuted_input, IP, 8);

    int left[4], right[4], f_output[4];
    for (int i = 0; i < 4; i++) {
        left[i] = permuted_input[i];
        right[i] = permuted_input[i + 4];
    }

    int K1[8], K2[8];
    key_generation(key, K1, K2);

    int *subkey1, *subkey2;
    if (mode =
