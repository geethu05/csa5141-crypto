#include <stdio.h>
#include <string.h>
#include <openssl/evp.h>
#include <openssl/aes.h>

// Function to print bytes in hexadecimal
void print_hex(const unsigned char *data, size_t len) {
    for (size_t i = 0; i < len; i++) {
        printf("%02x", data[i]);
    }
    printf("\n");
}

// Function to compute CBC-MAC
void compute_cbc_mac(const unsigned char *key, const unsigned char *data, size_t data_len, unsigned char *mac, size_t *mac_len) {
    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
    const EVP_CIPHER *cipher = EVP_aes_128_cbc();
    unsigned char iv[AES_BLOCK_SIZE] = {0};

    EVP_EncryptInit_ex(ctx, cipher, NULL, key, iv);

    int len;
    unsigned char outbuf[AES_BLOCK_SIZE];
    EVP_EncryptUpdate(ctx, outbuf, &len, data, data_len);

    // Since we are using only one block, we don't need to handle padding
    EVP_EncryptFinal_ex(ctx, mac, &len);

    EVP_CIPHER_CTX_free(ctx);

    *mac_len = AES_BLOCK_SIZE;
}

int main() {
    unsigned char key[AES_BLOCK_SIZE] = "0123456789abcdef";
    unsigned char X[AES_BLOCK_SIZE] = "exampleblock123";
    unsigned char mac[AES_BLOCK_SIZE];
    size_t mac_len;

    // Compute CBC-MAC for one-block message X
    compute_cbc_mac(key, X, AES_BLOCK_SIZE, mac, &mac_len);
    printf("CBC-MAC of X: ");
    print_hex(mac, mac_len);

    // Construct the two-block message X || (X XOR T)
    unsigned char two_block_message[2 * AES_BLOCK_SIZE];
    memcpy(two_block_message, X, AES_BLOCK_SIZE);
    for (size_t i = 0; i < AES_BLOCK_SIZE; i++) {
        two_block_message[AES_BLOCK_SIZE + i] = X[i] ^ mac[i];
    }

    // Compute CBC-MAC for the two-block message
    unsigned char mac_two_blocks[AES_BLOCK_SIZE];
    compute_cbc_mac(key, two_block_message, 2 * AES_BLOCK_SIZE, mac_two_blocks, &mac_len);
    printf("CBC-MAC of X || (X XOR T): ");
    print_hex(mac_two_blocks, mac_len);

    return 0;
}
