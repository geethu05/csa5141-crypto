#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define N 3 // Size of the key matrix (NxN)

// Function to find the modular inverse of a number under modulo m
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}

// Function to calculate the determinant of a matrix
int determinant(int matrix[N][N], int n) {
    int det = 0;
    if (n == 1)
        return matrix[0][0];
    int temp[N][N];
    int sign = 1;
    for (int f = 0; f < n; f++) {
        int subi = 0;
        for (int i = 1; i < n; i++) {
            int subj = 0;
            for (int j = 0; j < n; j++) {
                if (j == f)
                    continue;
                temp[subi][subj] = matrix[i][j];
                subj++;
            }
            subi++;
        }
        det += sign * matrix[0][f] * determinant(temp, n - 1);
        sign = -sign;
    }
    return det;
}

// Function to find the cofactor matrix of a given matrix
void cofactor(int matrix[N][N], int temp[N][N], int p, int q, int n) {
    int i = 0, j = 0;
    for (int row = 0; row < n; row++) {
        for (int col = 0; col < n; col++) {
            if (row != p && col != q) {
                temp[i][j++] = matrix[row][col];
                if (j == n - 1) {
                    j = 0;
                    i++;
                }
            }
        }
    }
}

// Function to find the adjoint of a matrix
void adjoint(int matrix[N][N], int adj[N][N]) {
    if (N == 1) {
        adj[0][0] = 1;
        return;
    }
    int sign = 1, temp[N][N];
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cofactor(matrix, temp, i, j, N);
            sign = ((i + j) % 2 == 0) ? 1 : -1;
            adj[j][i] = (sign * determinant(temp, N - 1)) % 26;
            if (adj[j][i] < 0)
                adj[j][i] += 26;
        }
    }
}

// Function to find the inverse of a matrix
int inverseMatrix(int matrix[N][N], int inverse[N][N]) {
    int det = determinant(matrix, N);
    int invDet = modInverse(det % 26, 26);
    if (invDet == -1) {
        printf("Inverse doesn't exist\n");
        return 0;
    }
    int adj[N][N];
    adjoint(matrix, adj);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            inverse[i][j] = (adj[i][j] * invDet) % 26;
            if (inverse[i][j] < 0)
                inverse[i][j] += 26;
        }
    }
    return 1;
}

// Function to encrypt a plaintext block using the Hill cipher
void encryptBlock(int key[N][N], int block[N], int result[N]) {
    for (int i = 0; i < N; i++) {
        result[i] = 0;
        for (int j = 0; j < N; j++) {
            result[i] = (result[i] + key[i][j] * block[j]) % 26;
        }
    }
}

// Function to decrypt a ciphertext block using the Hill cipher
void decryptBlock(int inverseKey[N][N], int block[N], int result[N]) {
    for (int i = 0; i < N; i++) {
        result[i] = 0;
        for (int j = 0; j < N; j++) {
            result[i] = (result[i] + inverseKey[i][j] * block[j]) % 26;
        }
    }
}

// Function to convert characters to numerical values (A=0, B=1, ..., Z=25)
void charToNum(char *text, int *num) {
    for (int i = 0; i < N; i++) {
        num[i] = text[i] - 'A';
    }
}

// Function to convert numerical values to characters (0=A, 1=B, ..., 25=Z)
void numToChar(int *num, char *text) {
    for (int i = 0; i < N; i++) {
        text[i] = num[i] + 'A';
    }
    text[N] = '\0'; // Null-terminate the string
}

int main() {
    int key[N][N] = { {6, 24, 1}, {13, 16, 10}, {20, 17, 15} };
    int inverseKey[N][N];

    if (!inverseMatrix(key, inverseKey)) {
        return 1;
    }

    char plaintext[N + 1], ciphertext[N + 1], decryptedtext[N + 1];
    int plaintextNum[N], ciphertextNum[N], decryptedNum[N];

    printf("Enter a %d-letter plaintext: ", N);
    scanf("%s", plaintext);

    charToNum(plaintext, plaintextNum);

    // Encrypt the plaintext
    encryptBlock(key, plaintextNum, ciphertextNum);
    numToChar(ciphertextNum, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);

    // Decrypt the ciphertext
    decryptBlock(inverseKey, ciphertextNum, decryptedNum);
    numToChar(decryptedNum, decryptedtext);
    printf("Decrypted text: %s\n", decryptedtext);

    return 0;
}
