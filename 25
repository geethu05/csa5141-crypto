#include <stdio.h>
#include <stdint.h>

// Function to compute gcd using Euclidean algorithm
uint64_t gcd(uint64_t a, uint64_t b) {
    while (b != 0) {
        uint64_t t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Function to find the modular inverse using the extended Euclidean algorithm
uint64_t mod_inverse(uint64_t a, uint64_t m) {
    int64_t m0 = m, t, q;
    int64_t x0 = 0, x1 = 1;

    if (m == 1) {
        return 0;
    }

    while (a > 1) {
        // q is quotient
        q = a / m;
        t = m;

        // m is remainder now, process same as Euclid's algorithm
        m = a % m;
        a = t;
        t = x0;

        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0) {
        x1 += m0;
    }

    return x1;
}

// Function to decrypt ciphertext using private key
uint64_t rsa_decrypt(uint64_t C, uint64_t d, uint64_t n) {
    uint64_t result = 1;
    C = C % n;
    while (d > 0) {
        if (d % 2 == 1) {
            result = (result * C) % n;
        }
        d = d >> 1;
        C = (C * C) % n;
    }
    return result;
}

int main() {
    uint64_t n = 3599; // n = p * q
    uint64_t e = 31;   // Public key exponent
    uint64_t C = 1234; // Example ciphertext (this would normally be given)
    uint64_t M = 37;   // Example plaintext block with a common factor with n

    // Find p by computing gcd(M, n)
    uint64_t p = gcd(M, n);
    if (p == 1 || p == n) {
        printf("No useful common factor found.\n");
        return 1;
    }

    // Compute q
    uint64_t q = n / p;

    printf("Factors of %lu are p = %lu and q = %lu\n", n, p, q);

    // Compute φ(n)
    uint64_t phi_n = (p - 1) * (q - 1);
    printf("φ(n) = %lu\n", phi_n);

    // Compute the private key d
    uint64_t d = mod_inverse(e, phi_n);
    printf("The private key d is %lu\n", d);

    // Decrypt the ciphertext
    uint64_t decrypted = rsa_decrypt(C, d, n);
    printf("Decrypted plaintext is %lu\n", decrypted);

    return 0;
}
