#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_LENGTH 26

// Function to remove duplicates and generate the cipher alphabet from a keyword
void generateCipherAlphabet(char *keyword, char *cipherAlphabet) {
    int used[ALPHABET_LENGTH] = {0};
    int index = 0;
    
    // Add the keyword to the cipher alphabet
    for (int i = 0; i < strlen(keyword); i++) {
        char ch = toupper(keyword[i]);
        if (!used[ch - 'A']) {
            cipherAlphabet[index++] = ch;
            used[ch - 'A'] = 1;
        }
    }
    
    // Add remaining letters to the cipher alphabet
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            cipherAlphabet[index++] = ch;
        }
    }
    cipherAlphabet[index] = '\0';
}

// Function to encrypt the plaintext using the cipher alphabet
void encrypt(char *plaintext, char *cipherAlphabet, char *ciphertext) {
    for (int i = 0; i < strlen(plaintext); i++) {
        if (isalpha(plaintext[i])) {
            char ch = toupper(plaintext[i]);
            ciphertext[i] = cipherAlphabet[ch - 'A'];
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[strlen(plaintext)] = '\0';
}

// Function to decrypt the ciphertext using the cipher alphabet
void decrypt(char *ciphertext, char *cipherAlphabet, char *plaintext) {
    for (int i = 0; i < strlen(ciphertext); i++) {
        if (isalpha(ciphertext[i])) {
            char ch = toupper(ciphertext[i]);
            for (int j = 0; j < ALPHABET_LENGTH; j++) {
                if (cipherAlphabet[j] == ch) {
                    plaintext[i] = 'A' + j;
                    break;
                }
            }
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

int main() {
    char keyword[] = "CIPHER";
    char plaintext[100];
    char ciphertext[100];
    char decryptedtext[100];
    char cipherAlphabet[ALPHABET_LENGTH + 1];

    // Generate the cipher alphabet from the keyword
    generateCipherAlphabet(keyword, cipherAlphabet);

    printf("Keyword: %s\n", keyword);
    printf("Cipher Alphabet: %s\n", cipherAlphabet);

    // Get the plaintext from the user
    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';  // Remove newline character

    // Encrypt the plaintext
    encrypt(plaintext, cipherAlphabet, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);

    // Decrypt the ciphertext
    decrypt(ciphertext, cipherAlphabet, decryptedtext);
    printf("Decrypted text: %s\n", decryptedtext);

    return 0;
}
